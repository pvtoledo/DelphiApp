unit MyThread;

interface

  uses
  System.Threading,
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Types,
  System.Variants,
  System.Classes,
  Vcl.StdCtrls,
  Vcl.ComCtrls;

  type
  TmyThread = class(TThread)
    protected
      procedure Execute; override;
    public
      progress: TProgressBar;
      timeSleep: Integer;
      constructor Create(const p: TProgressBar; const tSleep: Integer);
      destructor Destroy;
end;

implementation
uses
  ufTarefa2;
{ TmyThread }

constructor TmyThread.Create(const p: TProgressBar; const tSleep: Integer);
begin
  inherited Create;
  progress:= p;
  timeSleep:= tSleep;
  Self.FreeOnTerminate := True;
  ThreadList.Add(Self);
end;


destructor TmyThread.Destroy;
begin
  ThreadList.Remove(Self);
  if threadList.LockList.Count = 0 then
    FreeAndNil(ThreadList);
  inherited Destroy;

end;

procedure TmyThread.Execute;
var
  i: Integer;
begin
  inherited;
  progress.Position:= 0;
  for i := 0 to 100 do
  begin
    Sleep(timeSleep);
    progress.StepBy(1);
  end;
end;

end.

